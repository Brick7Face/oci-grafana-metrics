{"version":3,"sources":["../src/datasource.js"],"names":["_","regions","namespaces","retryOrThrow","OCIDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","type","url","name","id","tenancyOCID","jsonData","defaultRegion","environment","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","doRequest","then","res","forEach","result","results","r","series","push","target","s","datapoints","points","tables","refId","metric","map","region","hasOwnProperty","i","tags","value","key","operator","join","dimension","compartment","replace","scopedVars","queryType","namespace","resolution","datasourceId","window","aggregation","range","timeRange","response","status","message","title","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","method","varString","compartmentQuery","match","getCompartments","regionQuery","regs","reg","row","metricQuery","trim","metricFindQuery","namespaceQuery","names","Error","templateMeticSearch","Object","mapToTextValue","searchField","table","m","rows","text","isObject","_this","datasourceRequest","from","valueOf","toString","to","queries"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash'\nimport { regions, namespaces } from './constants'\nimport retryOrThrow from './util/retry'\n\nexport class OCIDatasource {\n  constructor (instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type\n    this.url = instanceSettings.url\n    this.name = instanceSettings.name\n    this.id = instanceSettings.id\n    this.tenancyOCID = instanceSettings.jsonData.tenancyOCID\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion\n    this.environment = instanceSettings.jsonData.environment\n    this.q = $q\n    this.backendSrv = backendSrv\n    this.templateSrv = templateSrv\n    this.timeSrv = timeSrv\n  }\n\n  query (options) {\n    var query = this.buildQueryParameters(options)\n    query.targets = query.targets.filter(t => !t.hide)\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] })\n    }\n\n    return this.doRequest(query)\n      .then(result => {\n        var res = []\n        _.forEach(result.data.results, r => {\n          _.forEach(r.series, s => {\n            res.push({ target: s.name, datapoints: s.points })\n          })\n          _.forEach(r.tables, t => {\n            t.type = 'table'\n            t.refId = r.refId\n            res.push(t)\n          })\n        })\n\n        result.data = res\n        return result\n      })\n  }\n\n  buildQueryParameters (options) {\n    // remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.metric !== 'select metric'\n    })\n\n    var targets = _.map(options.targets, target => {\n      let region = target.region\n      let t = []\n      if (target.hasOwnProperty('tags')) {\n        for (let i = 0; i < target.tags.length; i++) {\n          if (target.tags[i].value !== 'select tag value') {\n            t.push(`${target.tags[i].key} ${target.tags[i].operator} \"${target.tags[i].value}\"`)\n          }\n        }\n        t.join()\n      }\n\n      if (target.region === 'select region') {\n        region = this.defaultRegion\n      }\n      let dimension = (t.length === 0) ? '' : `{${t}}`\n\n      return {\n        compartment: this.templateSrv.replace(target.compartment, options.scopedVars || {}),\n        environment: this.environment,\n        queryType: 'query',\n        region: this.templateSrv.replace(region, options.scopedVars || {}),\n        tenancyOCID: this.tenancyOCID,\n        namespace: this.templateSrv.replace(target.namespace, options.scopedVars || {}),\n        resolution: target.resolution,\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie',\n        datasourceId: this.id,\n        query: `${this.templateSrv.replace(target.metric, options.scopedVars || {})}[${target.window}]${dimension}.${target.aggregation}`\n      }\n    })\n\n    options.targets = targets\n\n    return options\n  }\n\n  testDatasource () {\n    return this.doRequest({\n      targets: [{\n        queryType: 'query',\n        refId: 'test',\n        region: this.defaultRegion,\n        tenancyOCID: this.tenancyOCID,\n        compartment: '',\n        environment: this.environment,\n        datasourceId: this.id\n      }],\n      range: this.timeSrv.timeRange()\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: 'success', message: 'Data source is working', title: 'Success' }\n      }\n    })\n  }\n\n  annotationQuery (options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob')\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    }\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data\n    })\n  }\n\n  templateMeticSearch (varString) {\n    let compartmentQuery = varString.match(/^compartments\\(\\)/)\n    if (compartmentQuery) {\n      return this.getCompartments()\n    }\n\n    let regionQuery = varString.match(/^regions\\(\\)/)\n    if (regionQuery) {\n      let regs = regions.map((reg) => {\n        return { row: reg, value: reg }\n      })\n      return this.q.when(regs)\n    }\n\n    let metricQuery = varString.match(/metrics\\((\\$?\\w+)(,\\s*\\$\\w+)*\\)/)\n    if (metricQuery) {\n      let target = {\n        namespace: this.templateSrv.replace(metricQuery[1]),\n        compartment: this.templateSrv.replace(metricQuery[2]).replace(',', '').trim()\n      }\n      return this.metricFindQuery(target)\n    }\n\n    let namespaceQuery = varString.match(/namespaces\\(\\)/)\n    if (namespaceQuery) {\n      let names = namespaces.map((reg) => {\n        return { row: reg, value: reg }\n      })\n      return this.q.when(names)\n    }\n    throw new Error('Unable to parse templating string')\n  }\n\n  metricFindQuery (target) {\n    if (typeof (target) === 'string') {\n      return this.templateMeticSearch(target)\n    }\n\n    var range = this.timeSrv.timeRange()\n    let region = this.defaultRegion\n    if (target.namespace === 'select namespace') {\n      target.namespace = ''\n    }\n    if (target.compartment === 'select compartment') {\n      target.compartment = ''\n    }\n    if (Object.hasOwnProperty(target, 'region') && target.region !== 'select region') {\n      region = target.region\n    }\n\n    var targets = [{\n      compartment: this.templateSrv.replace(target.compartment),\n      environment: this.environment,\n      queryType: 'search',\n      tenancyOCID: this.tenancyOCID,\n      region: this.templateSrv.replace(region),\n      datasourceId: this.id,\n      refId: 'search',\n      namespace: this.templateSrv.replace(target.namespace)\n    }]\n    var options = {\n      range: range,\n      targets: targets\n    }\n    return this.doRequest(options).then((res) => {\n      return this.mapToTextValue(res, 'search')\n    })\n  }\n\n  mapToTextValue (result, searchField) {\n    var table = result.data.results[searchField].tables[0]\n    if (!table) {\n      return []\n    }\n\n    var m = _.map(table.rows, (row, i) => {\n      if (row.length > 1) {\n        return { text: row[0], value: row[1] }\n      } else if (_.isObject(row[0])) {\n        return { text: row[0], value: i }\n      }\n      return { text: row[0], value: row[0] }\n    })\n    return m\n  }\n\n  getCompartments () {\n    var range = this.timeSrv.timeRange()\n    var targets = [{\n      environment: this.environment,\n      region: this.defaultRegion,\n      tenancyOCID: this.tenancyOCID,\n      queryType: 'compartments',\n      datasourceId: this.id,\n      refId: 'compartments'\n    }]\n    var options = {\n      range: range,\n      targets: targets\n    }\n    return this.doRequest(options).then((res) => { return this.mapToTextValue(res, 'compartment') })\n  }\n\n  getDimensions (target) {\n    var range = this.timeSrv.timeRange()\n    let region = target.region\n    if (target.namespace === 'select namespace') {\n      target.namespace = ''\n    }\n    if (target.compartment === 'select compartment') {\n      target.compartment = ''\n    }\n    if (target.metric === 'select metric') {\n      return []\n    }\n    if (region === 'select region') {\n      region = this.defaultRegion\n    }\n\n    var targets = [{\n      compartment: this.templateSrv.replace(target.compartment),\n      environment: this.environment,\n      queryType: 'dimensions',\n      region: this.templateSrv.replace(region),\n      tenancyOCID: this.tenancyOCID,\n\n      datasourceId: this.id,\n      refId: 'dimensions',\n      metric: this.templateSrv.replace(target.metric),\n      namespace: this.templateSrv.replace(target.namespace)\n    }]\n\n    var options = {\n      range: range,\n      targets: targets\n    }\n    return this.doRequest(options).then((res) => { return this.mapToTextValue(res, 'dimensions') })\n  }\n\n  getNamespaces (target) {\n    let region = target.region\n    if (region === 'select region') {\n      region = this.defaultRegion\n    }\n    return this.doRequest({ targets: [{\n      // commonRequestParameters\n      compartment: this.templateSrv.replace(target.compartment),\n      environment: this.environment,\n      queryType: 'namespaces',\n      region: this.templateSrv.replace(region),\n      tenancyOCID: this.tenancyOCID,\n\n      datasourceId: this.id,\n      refId: 'namespaces'\n    }],\n    range: this.timeSrv.timeRange()\n    }).then((namespaces) => { return this.mapToTextValue(namespaces, 'namespaces') })\n  }\n\n  doRequest (options) {\n    let _this = this\n    return retryOrThrow(() => {\n      return _this.backendSrv.datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: options.targets\n        }\n      })\n    }, 10)\n  }\n}\n"]}