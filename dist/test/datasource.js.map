{"version":3,"sources":["../../src/datasource.js"],"names":["OCIDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","type","url","name","id","tenancyOCID","jsonData","defaultRegion","environment","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","doRequest","then","res","_","forEach","result","results","r","series","push","target","s","datapoints","points","tables","refId","metric","map","region","hasOwnProperty","i","tags","value","key","operator","join","dimension","compartment","replace","scopedVars","queryType","namespace","resolution","datasourceId","window","aggregation","range","timeRange","response","status","message","title","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","method","varString","compartmentQuery","match","getCompartments","regionQuery","regs","regions","reg","row","metricQuery","trim","metricFindQuery","namespaceQuery","names","namespaces","Error","templateMeticSearch","Object","mapToTextValue","searchField","table","m","rows","text","isObject","_this","datasourceRequest","from","valueOf","toString","to","queries"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash'\nimport { regions, namespaces } from './constants'\nimport retryOrThrow from './util/retry'\n\nexport class OCIDatasource {\n  constructor (instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type\n    this.url = instanceSettings.url\n    this.name = instanceSettings.name\n    this.id = instanceSettings.id\n    this.tenancyOCID = instanceSettings.jsonData.tenancyOCID\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion\n    this.environment = instanceSettings.jsonData.environment\n    this.q = $q\n    this.backendSrv = backendSrv\n    this.templateSrv = templateSrv\n    this.timeSrv = timeSrv\n  }\n\n  query (options) {\n    var query = this.buildQueryParameters(options)\n    query.targets = query.targets.filter(t => !t.hide)\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] })\n    }\n\n    return this.doRequest(query)\n      .then(result => {\n        var res = []\n        _.forEach(result.data.results, r => {\n          _.forEach(r.series, s => {\n            res.push({ target: s.name, datapoints: s.points })\n          })\n          _.forEach(r.tables, t => {\n            t.type = 'table'\n            t.refId = r.refId\n            res.push(t)\n          })\n        })\n\n        result.data = res\n        return result\n      })\n  }\n\n  buildQueryParameters (options) {\n    // remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.metric !== 'select metric'\n    })\n\n    var targets = _.map(options.targets, target => {\n      let region = target.region\n      let t = []\n      if (target.hasOwnProperty('tags')) {\n        for (let i = 0; i < target.tags.length; i++) {\n          if (target.tags[i].value !== 'select tag value') {\n            t.push(`${target.tags[i].key} ${target.tags[i].operator} \"${target.tags[i].value}\"`)\n          }\n        }\n        t.join()\n      }\n\n      if (target.region === 'select region') {\n        region = this.defaultRegion\n      }\n      let dimension = (t.length === 0) ? '' : `{${t}}`\n\n      return {\n        compartment: this.templateSrv.replace(target.compartment, options.scopedVars || {}),\n        environment: this.environment,\n        queryType: 'query',\n        region: this.templateSrv.replace(region, options.scopedVars || {}),\n        tenancyOCID: this.tenancyOCID,\n        namespace: this.templateSrv.replace(target.namespace, options.scopedVars || {}),\n        resolution: target.resolution,\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie',\n        datasourceId: this.id,\n        query: `${this.templateSrv.replace(target.metric, options.scopedVars || {})}[${target.window}]${dimension}.${target.aggregation}`\n      }\n    })\n\n    options.targets = targets\n\n    return options\n  }\n\n  testDatasource () {\n    return this.doRequest({\n      targets: [{\n        queryType: 'query',\n        refId: 'test',\n        region: this.defaultRegion,\n        tenancyOCID: this.tenancyOCID,\n        compartment: '',\n        environment: this.environment,\n        datasourceId: this.id\n      }],\n      range: this.timeSrv.timeRange()\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: 'success', message: 'Data source is working', title: 'Success' }\n      }\n    })\n  }\n\n  annotationQuery (options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob')\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    }\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data\n    })\n  }\n\n  templateMeticSearch (varString) {\n    let compartmentQuery = varString.match(/^compartments\\(\\)/)\n    if (compartmentQuery) {\n      return this.getCompartments()\n    }\n\n    let regionQuery = varString.match(/^regions\\(\\)/)\n    if (regionQuery) {\n      let regs = regions.map((reg) => {\n        return { row: reg, value: reg }\n      })\n      return this.q.when(regs)\n    }\n\n    let metricQuery = varString.match(/metrics\\((\\$?\\w+)(,\\s*\\$\\w+)*\\)/)\n    if (metricQuery) {\n      let target = {\n        namespace: this.templateSrv.replace(metricQuery[1]),\n        compartment: this.templateSrv.replace(metricQuery[2]).replace(',', '').trim()\n      }\n      return this.metricFindQuery(target)\n    }\n\n    let namespaceQuery = varString.match(/namespaces\\(\\)/)\n    if (namespaceQuery) {\n      let names = namespaces.map((reg) => {\n        return { row: reg, value: reg }\n      })\n      return this.q.when(names)\n    }\n    throw new Error('Unable to parse templating string')\n  }\n\n  metricFindQuery (target) {\n    if (typeof (target) === 'string') {\n      return this.templateMeticSearch(target)\n    }\n\n    var range = this.timeSrv.timeRange()\n    let region = this.defaultRegion\n    if (target.namespace === 'select namespace') {\n      target.namespace = ''\n    }\n    if (target.compartment === 'select compartment') {\n      target.compartment = ''\n    }\n    if (Object.hasOwnProperty(target, 'region') && target.region !== 'select region') {\n      region = target.region\n    }\n\n    var targets = [{\n      compartment: this.templateSrv.replace(target.compartment),\n      environment: this.environment,\n      queryType: 'search',\n      tenancyOCID: this.tenancyOCID,\n      region: this.templateSrv.replace(region),\n      datasourceId: this.id,\n      refId: 'search',\n      namespace: this.templateSrv.replace(target.namespace)\n    }]\n    var options = {\n      range: range,\n      targets: targets\n    }\n    return this.doRequest(options).then((res) => {\n      return this.mapToTextValue(res, 'search')\n    })\n  }\n\n  mapToTextValue (result, searchField) {\n    var table = result.data.results[searchField].tables[0]\n    if (!table) {\n      return []\n    }\n\n    var m = _.map(table.rows, (row, i) => {\n      if (row.length > 1) {\n        return { text: row[0], value: row[1] }\n      } else if (_.isObject(row[0])) {\n        return { text: row[0], value: i }\n      }\n      return { text: row[0], value: row[0] }\n    })\n    return m\n  }\n\n  getCompartments () {\n    var range = this.timeSrv.timeRange()\n    var targets = [{\n      environment: this.environment,\n      region: this.defaultRegion,\n      tenancyOCID: this.tenancyOCID,\n      queryType: 'compartments',\n      datasourceId: this.id,\n      refId: 'compartments'\n    }]\n    var options = {\n      range: range,\n      targets: targets\n    }\n    return this.doRequest(options).then((res) => { return this.mapToTextValue(res, 'compartment') })\n  }\n\n  getDimensions (target) {\n    var range = this.timeSrv.timeRange()\n    let region = target.region\n    if (target.namespace === 'select namespace') {\n      target.namespace = ''\n    }\n    if (target.compartment === 'select compartment') {\n      target.compartment = ''\n    }\n    if (target.metric === 'select metric') {\n      return []\n    }\n    if (region === 'select region') {\n      region = this.defaultRegion\n    }\n\n    var targets = [{\n      compartment: this.templateSrv.replace(target.compartment),\n      environment: this.environment,\n      queryType: 'dimensions',\n      region: this.templateSrv.replace(region),\n      tenancyOCID: this.tenancyOCID,\n\n      datasourceId: this.id,\n      refId: 'dimensions',\n      metric: this.templateSrv.replace(target.metric),\n      namespace: this.templateSrv.replace(target.namespace)\n    }]\n\n    var options = {\n      range: range,\n      targets: targets\n    }\n    return this.doRequest(options).then((res) => { return this.mapToTextValue(res, 'dimensions') })\n  }\n\n  getNamespaces (target) {\n    let region = target.region\n    if (region === 'select region') {\n      region = this.defaultRegion\n    }\n    return this.doRequest({ targets: [{\n      // commonRequestParameters\n      compartment: this.templateSrv.replace(target.compartment),\n      environment: this.environment,\n      queryType: 'namespaces',\n      region: this.templateSrv.replace(region),\n      tenancyOCID: this.tenancyOCID,\n\n      datasourceId: this.id,\n      refId: 'namespaces'\n    }],\n    range: this.timeSrv.timeRange()\n    }).then((namespaces) => { return this.mapToTextValue(namespaces, 'namespaces') })\n  }\n\n  doRequest (options) {\n    let _this = this\n    return retryOrThrow(() => {\n      return _this.backendSrv.datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: options.targets\n        }\n      })\n    }, 10)\n  }\n}\n"]}